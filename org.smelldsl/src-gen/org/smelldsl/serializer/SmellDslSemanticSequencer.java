/*
 * generated by Xtext 2.26.0-SNAPSHOT
 */
package org.smelldsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.smelldsl.services.SmellDslGrammarAccess;
import org.smelldsl.smellDsl.Domainmodel;
import org.smelldsl.smellDsl.Expression;
import org.smelldsl.smellDsl.Feature;
import org.smelldsl.smellDsl.LogicExpression;
import org.smelldsl.smellDsl.Measure;
import org.smelldsl.smellDsl.Optscale;
import org.smelldsl.smellDsl.Result;
import org.smelldsl.smellDsl.Rule;
import org.smelldsl.smellDsl.Smell;
import org.smelldsl.smellDsl.SmellDslPackage;
import org.smelldsl.smellDsl.SmellType;
import org.smelldsl.smellDsl.Symptom;
import org.smelldsl.smellDsl.Treatment;

@SuppressWarnings("all")
public class SmellDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SmellDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SmellDslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SmellDslPackage.DOMAINMODEL:
				sequence_Domainmodel(context, (Domainmodel) semanticObject); 
				return; 
			case SmellDslPackage.EXPRESSION:
				sequence_Expression(context, (Expression) semanticObject); 
				return; 
			case SmellDslPackage.FEATURE:
				sequence_Feature(context, (Feature) semanticObject); 
				return; 
			case SmellDslPackage.LOGIC_EXPRESSION:
				sequence_LogicExpression(context, (LogicExpression) semanticObject); 
				return; 
			case SmellDslPackage.MEASURE:
				sequence_Measure(context, (Measure) semanticObject); 
				return; 
			case SmellDslPackage.OPTSCALE:
				sequence_Optscale(context, (Optscale) semanticObject); 
				return; 
			case SmellDslPackage.RESULT:
				sequence_Result(context, (Result) semanticObject); 
				return; 
			case SmellDslPackage.RULE:
				sequence_Rule(context, (Rule) semanticObject); 
				return; 
			case SmellDslPackage.SMELL:
				sequence_Smell(context, (Smell) semanticObject); 
				return; 
			case SmellDslPackage.SMELL_TYPE:
				sequence_SmellType(context, (SmellType) semanticObject); 
				return; 
			case SmellDslPackage.SYMPTOM:
				sequence_Symptom(context, (Symptom) semanticObject); 
				return; 
			case SmellDslPackage.TREATMENT:
				sequence_Treatment(context, (Treatment) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Domainmodel returns Domainmodel
	 *
	 * Constraint:
	 *     elements+=Type+
	 * </pre>
	 */
	protected void sequence_Domainmodel(ISerializationContext context, Domainmodel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Expression returns Expression
	 *
	 * Constraint:
	 *     relationalOperator+=RelationalOperator
	 * </pre>
	 */
	protected void sequence_Expression(ISerializationContext context, Expression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Feature returns Feature
	 *
	 * Constraint:
	 *     (name=ID optscales?=Optscale? measures+=Measure*)
	 * </pre>
	 */
	protected void sequence_Feature(ISerializationContext context, Feature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     LogicExpression returns LogicExpression
	 *
	 * Constraint:
	 *     (expression=Expression | (expression=Expression logicOperator=LogicOperator logicExpression=LogicExpression))
	 * </pre>
	 */
	protected void sequence_LogicExpression(ISerializationContext context, LogicExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Measure returns Measure
	 *
	 * Constraint:
	 *     (name=ID | (name=ID measure=Measure))
	 * </pre>
	 */
	protected void sequence_Measure(ISerializationContext context, Measure semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Optscale returns Optscale
	 *
	 * Constraint:
	 *     scaletype=Scaletype
	 * </pre>
	 */
	protected void sequence_Optscale(ISerializationContext context, Optscale semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmellDslPackage.Literals.OPTSCALE__SCALETYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmellDslPackage.Literals.OPTSCALE__SCALETYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOptscaleAccess().getScaletypeScaletypeEnumRuleCall_1_0(), semanticObject.getScaletype());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Result returns Result
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_Result(ISerializationContext context, Result semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmellDslPackage.Literals.RESULT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmellDslPackage.Literals.RESULT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getResultAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Type returns Rule
	 *     Rule returns Rule
	 *
	 * Constraint:
	 *     (name=ID logicExpression+=LogicExpression* result+=Result*)
	 * </pre>
	 */
	protected void sequence_Rule(ISerializationContext context, Rule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Type returns SmellType
	 *     SmellType returns SmellType
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_SmellType(ISerializationContext context, SmellType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmellDslPackage.Literals.TYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmellDslPackage.Literals.TYPE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSmellTypeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Type returns Smell
	 *     Smell returns Smell
	 *
	 * Constraint:
	 *     (name=ID superType=[SmellType|ID]? smellcontent+=Feature* symptom?=Symptom? treatment?=Treatment?)
	 * </pre>
	 */
	protected void sequence_Smell(ISerializationContext context, Smell semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Symptom returns Symptom
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_Symptom(ISerializationContext context, Symptom semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmellDslPackage.Literals.SYMPTOM__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmellDslPackage.Literals.SYMPTOM__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSymptomAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Treatment returns Treatment
	 *
	 * Constraint:
	 *     name=ID
	 * </pre>
	 */
	protected void sequence_Treatment(ISerializationContext context, Treatment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmellDslPackage.Literals.TREATMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmellDslPackage.Literals.TREATMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTreatmentAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
