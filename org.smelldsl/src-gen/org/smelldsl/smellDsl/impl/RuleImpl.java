/**
 * generated by Xtext 2.26.0-SNAPSHOT
 */
package org.smelldsl.smellDsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.smelldsl.smellDsl.LogicExpression;
import org.smelldsl.smellDsl.Result;
import org.smelldsl.smellDsl.Rule;
import org.smelldsl.smellDsl.SmellDslPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Rule</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.smelldsl.smellDsl.impl.RuleImpl#getLogicExpression <em>Logic Expression</em>}</li>
 *   <li>{@link org.smelldsl.smellDsl.impl.RuleImpl#getResult <em>Result</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RuleImpl extends TypeImpl implements Rule
{
  /**
   * The cached value of the '{@link #getLogicExpression() <em>Logic Expression</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLogicExpression()
   * @generated
   * @ordered
   */
  protected EList<LogicExpression> logicExpression;

  /**
   * The cached value of the '{@link #getResult() <em>Result</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getResult()
   * @generated
   * @ordered
   */
  protected EList<Result> result;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RuleImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SmellDslPackage.Literals.RULE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<LogicExpression> getLogicExpression()
  {
    if (logicExpression == null)
    {
      logicExpression = new EObjectContainmentEList<LogicExpression>(LogicExpression.class, this, SmellDslPackage.RULE__LOGIC_EXPRESSION);
    }
    return logicExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Result> getResult()
  {
    if (result == null)
    {
      result = new EObjectContainmentEList<Result>(Result.class, this, SmellDslPackage.RULE__RESULT);
    }
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SmellDslPackage.RULE__LOGIC_EXPRESSION:
        return ((InternalEList<?>)getLogicExpression()).basicRemove(otherEnd, msgs);
      case SmellDslPackage.RULE__RESULT:
        return ((InternalEList<?>)getResult()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SmellDslPackage.RULE__LOGIC_EXPRESSION:
        return getLogicExpression();
      case SmellDslPackage.RULE__RESULT:
        return getResult();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SmellDslPackage.RULE__LOGIC_EXPRESSION:
        getLogicExpression().clear();
        getLogicExpression().addAll((Collection<? extends LogicExpression>)newValue);
        return;
      case SmellDslPackage.RULE__RESULT:
        getResult().clear();
        getResult().addAll((Collection<? extends Result>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SmellDslPackage.RULE__LOGIC_EXPRESSION:
        getLogicExpression().clear();
        return;
      case SmellDslPackage.RULE__RESULT:
        getResult().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SmellDslPackage.RULE__LOGIC_EXPRESSION:
        return logicExpression != null && !logicExpression.isEmpty();
      case SmellDslPackage.RULE__RESULT:
        return result != null && !result.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //RuleImpl
