/*
 * generated by Xtext 2.26.0-SNAPSHOT
 */
grammar InternalSmellDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.smelldsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.smelldsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.smelldsl.services.SmellDslGrammarAccess;

}

@parser::members {

 	private SmellDslGrammarAccess grammarAccess;

    public InternalSmellDslParser(TokenStream input, SmellDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Domainmodel";
   	}

   	@Override
   	protected SmellDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleDomainmodel
entryRuleDomainmodel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDomainmodelRule()); }
	iv_ruleDomainmodel=ruleDomainmodel
	{ $current=$iv_ruleDomainmodel.current; }
	EOF;

// Rule Domainmodel
ruleDomainmodel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getDomainmodelAccess().getElementsTypeParserRuleCall_0());
			}
			lv_elements_0_0=ruleType
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getDomainmodelRule());
				}
				add(
					$current,
					"elements",
					lv_elements_0_0,
					"org.smelldsl.SmellDsl.Type");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleType
entryRuleType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current; }
	EOF;

// Rule Type
ruleType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTypeAccess().getSmellTypeParserRuleCall_0());
		}
		this_SmellType_0=ruleSmellType
		{
			$current = $this_SmellType_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeAccess().getSmellParserRuleCall_1());
		}
		this_Smell_1=ruleSmell
		{
			$current = $this_Smell_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeAccess().getRuleParserRuleCall_2());
		}
		this_Rule_2=ruleRule
		{
			$current = $this_Rule_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSmellType
entryRuleSmellType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSmellTypeRule()); }
	iv_ruleSmellType=ruleSmellType
	{ $current=$iv_ruleSmellType.current; }
	EOF;

// Rule SmellType
ruleSmellType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='smelltype'
		{
			newLeafNode(otherlv_0, grammarAccess.getSmellTypeAccess().getSmelltypeKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getSmellTypeAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSmellTypeRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleSmell
entryRuleSmell returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSmellRule()); }
	iv_ruleSmell=ruleSmell
	{ $current=$iv_ruleSmell.current; }
	EOF;

// Rule Smell
ruleSmell returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='smell'
		{
			newLeafNode(otherlv_0, grammarAccess.getSmellAccess().getSmellKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getSmellAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSmellRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_2='extends'
			{
				newLeafNode(otherlv_2, grammarAccess.getSmellAccess().getExtendsKeyword_2_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSmellRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getSmellAccess().getSuperTypeSmellTypeCrossReference_2_1_0());
					}
				)
			)
		)?
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getSmellAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSmellAccess().getSmellcontentFeatureParserRuleCall_4_0());
				}
				lv_smellcontent_5_0=ruleFeature
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSmellRule());
					}
					add(
						$current,
						"smellcontent",
						lv_smellcontent_5_0,
						"org.smelldsl.SmellDsl.Feature");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getSmellAccess().getSymptomSymptomParserRuleCall_5_0());
				}
				lv_symptom_6_0=ruleSymptom
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSmellRule());
					}
					set(
						$current,
						"symptom",
						lv_symptom_6_0 != null,
						"org.smelldsl.SmellDsl.Symptom");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getSmellAccess().getTreatmentTreatmentParserRuleCall_6_0());
				}
				lv_treatment_7_0=ruleTreatment
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSmellRule());
					}
					set(
						$current,
						"treatment",
						lv_treatment_7_0 != null,
						"org.smelldsl.SmellDsl.Treatment");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getSmellAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleFeature
entryRuleFeature returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFeatureRule()); }
	iv_ruleFeature=ruleFeature
	{ $current=$iv_ruleFeature.current; }
	EOF;

// Rule Feature
ruleFeature returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='feature'
		{
			newLeafNode(otherlv_0, grammarAccess.getFeatureAccess().getFeatureKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getFeatureAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFeatureRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFeatureAccess().getOptscalesOptscaleParserRuleCall_2_0());
				}
				lv_optscales_2_0=ruleOptscale
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFeatureRule());
					}
					set(
						$current,
						"optscales",
						lv_optscales_2_0 != null,
						"org.smelldsl.SmellDsl.Optscale");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_3='with threshold'
		{
			newLeafNode(otherlv_3, grammarAccess.getFeatureAccess().getWithThresholdKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFeatureAccess().getMeasuresMeasureParserRuleCall_4_0());
				}
				lv_measures_4_0=ruleMeasure
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFeatureRule());
					}
					add(
						$current,
						"measures",
						lv_measures_4_0,
						"org.smelldsl.SmellDsl.Measure");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleOptscale
entryRuleOptscale returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOptscaleRule()); }
	iv_ruleOptscale=ruleOptscale
	{ $current=$iv_ruleOptscale.current; }
	EOF;

// Rule Optscale
ruleOptscale returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='is'
		{
			newLeafNode(otherlv_0, grammarAccess.getOptscaleAccess().getIsKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOptscaleAccess().getScaletypeScaletypeEnumRuleCall_1_0());
				}
				lv_scaletype_1_0=ruleScaletype
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOptscaleRule());
					}
					set(
						$current,
						"scaletype",
						lv_scaletype_1_0,
						"org.smelldsl.SmellDsl.Scaletype");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleMeasure
entryRuleMeasure returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMeasureRule()); }
	iv_ruleMeasure=ruleMeasure
	{ $current=$iv_ruleMeasure.current; }
	EOF;

// Rule Measure
ruleMeasure returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getMeasureAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMeasureRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		    |
		(
			(
				(
					lv_name_1_0=RULE_ID
					{
						newLeafNode(lv_name_1_0, grammarAccess.getMeasureAccess().getNameIDTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMeasureRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_1_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			otherlv_2=','
			{
				newLeafNode(otherlv_2, grammarAccess.getMeasureAccess().getCommaKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMeasureAccess().getMeasureMeasureParserRuleCall_1_2_0());
					}
					lv_measure_3_0=ruleMeasure
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMeasureRule());
						}
						set(
							$current,
							"measure",
							lv_measure_3_0,
							"org.smelldsl.SmellDsl.Measure");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleSymptom
entryRuleSymptom returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSymptomRule()); }
	iv_ruleSymptom=ruleSymptom
	{ $current=$iv_ruleSymptom.current; }
	EOF;

// Rule Symptom
ruleSymptom returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='symptom'
		{
			newLeafNode(otherlv_0, grammarAccess.getSymptomAccess().getSymptomKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getSymptomAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSymptomRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleTreatment
entryRuleTreatment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTreatmentRule()); }
	iv_ruleTreatment=ruleTreatment
	{ $current=$iv_ruleTreatment.current; }
	EOF;

// Rule Treatment
ruleTreatment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='treatment'
		{
			newLeafNode(otherlv_0, grammarAccess.getTreatmentAccess().getTreatmentKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTreatmentAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTreatmentRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
	)
;

// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	iv_ruleRule=ruleRule
	{ $current=$iv_ruleRule.current; }
	EOF;

// Rule Rule
ruleRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='rule'
		{
			newLeafNode(otherlv_0, grammarAccess.getRuleAccess().getRuleKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getRuleAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRuleRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='when'
		{
			newLeafNode(otherlv_2, grammarAccess.getRuleAccess().getWhenKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getLogicExpressionLogicExpressionParserRuleCall_3_0());
				}
				lv_logicExpression_3_0=ruleLogicExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					add(
						$current,
						"logicExpression",
						lv_logicExpression_3_0,
						"org.smelldsl.SmellDsl.LogicExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='then'
		{
			newLeafNode(otherlv_4, grammarAccess.getRuleAccess().getThenKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getResultResultParserRuleCall_5_0());
				}
				lv_result_5_0=ruleResult
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					add(
						$current,
						"result",
						lv_result_5_0,
						"org.smelldsl.SmellDsl.Result");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleLogicExpression
entryRuleLogicExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicExpressionRule()); }
	iv_ruleLogicExpression=ruleLogicExpression
	{ $current=$iv_ruleLogicExpression.current; }
	EOF;

// Rule LogicExpression
ruleLogicExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getLogicExpressionAccess().getExpressionExpressionParserRuleCall_0_0());
				}
				lv_expression_0_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLogicExpressionRule());
					}
					set(
						$current,
						"expression",
						lv_expression_0_0,
						"org.smelldsl.SmellDsl.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getLogicExpressionAccess().getExpressionExpressionParserRuleCall_1_0_0());
					}
					lv_expression_1_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLogicExpressionRule());
						}
						set(
							$current,
							"expression",
							lv_expression_1_0,
							"org.smelldsl.SmellDsl.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getLogicExpressionAccess().getLogicOperatorLogicOperatorEnumRuleCall_1_1_0());
					}
					lv_logicOperator_2_0=ruleLogicOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLogicExpressionRule());
						}
						set(
							$current,
							"logicOperator",
							lv_logicOperator_2_0,
							"org.smelldsl.SmellDsl.LogicOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getLogicExpressionAccess().getLogicExpressionLogicExpressionParserRuleCall_1_2_0());
					}
					lv_logicExpression_3_0=ruleLogicExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLogicExpressionRule());
						}
						set(
							$current,
							"logicExpression",
							lv_logicExpression_3_0,
							"org.smelldsl.SmellDsl.LogicExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			newLeafNode(this_ID_0, grammarAccess.getExpressionAccess().getIDTerminalRuleCall_0());
		}
		(
			otherlv_1='.'
			{
				newLeafNode(otherlv_1, grammarAccess.getExpressionAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				newLeafNode(this_ID_2, grammarAccess.getExpressionAccess().getIDTerminalRuleCall_1_1());
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getRelationalOperatorRelationalOperatorEnumRuleCall_2_0());
				}
				lv_relationalOperator_3_0=ruleRelationalOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					add(
						$current,
						"relationalOperator",
						lv_relationalOperator_3_0,
						"org.smelldsl.SmellDsl.RelationalOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		this_ID_4=RULE_ID
		{
			newLeafNode(this_ID_4, grammarAccess.getExpressionAccess().getIDTerminalRuleCall_3());
		}
		(
			otherlv_5='.'
			{
				newLeafNode(otherlv_5, grammarAccess.getExpressionAccess().getFullStopKeyword_4_0());
			}
			this_ID_6=RULE_ID
			{
				newLeafNode(this_ID_6, grammarAccess.getExpressionAccess().getIDTerminalRuleCall_4_1());
			}
		)
	)
;

// Entry rule entryRuleResult
entryRuleResult returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getResultRule()); }
	iv_ruleResult=ruleResult
	{ $current=$iv_ruleResult.current; }
	EOF;

// Rule Result
ruleResult returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getResultAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getResultRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Rule Scaletype
ruleScaletype returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='Nominal'
			{
				$current = grammarAccess.getScaletypeAccess().getNominalEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getScaletypeAccess().getNominalEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='Ordinal'
			{
				$current = grammarAccess.getScaletypeAccess().getOrdinalEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getScaletypeAccess().getOrdinalEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='Interval'
			{
				$current = grammarAccess.getScaletypeAccess().getIntervalEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getScaletypeAccess().getIntervalEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='Ratio'
			{
				$current = grammarAccess.getScaletypeAccess().getRatioEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getScaletypeAccess().getRatioEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule LogicOperator
ruleLogicOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='AND'
			{
				$current = grammarAccess.getLogicOperatorAccess().getANDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getLogicOperatorAccess().getANDEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='OR'
			{
				$current = grammarAccess.getLogicOperatorAccess().getOREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getLogicOperatorAccess().getOREnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule RelationalOperator
ruleRelationalOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='>='
			{
				$current = grammarAccess.getRelationalOperatorAccess().getGreaterThanOrEqualToEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getRelationalOperatorAccess().getGreaterThanOrEqualToEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='<='
			{
				$current = grammarAccess.getRelationalOperatorAccess().getLessThanOrEqualToEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getRelationalOperatorAccess().getLessThanOrEqualToEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='!='
			{
				$current = grammarAccess.getRelationalOperatorAccess().getNotEqualToEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getRelationalOperatorAccess().getNotEqualToEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='<'
			{
				$current = grammarAccess.getRelationalOperatorAccess().getLessThanEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getRelationalOperatorAccess().getLessThanEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='>'
			{
				$current = grammarAccess.getRelationalOperatorAccess().getGreaterThanEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getRelationalOperatorAccess().getGreaterThanEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='=='
			{
				$current = grammarAccess.getRelationalOperatorAccess().getEqualToEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getRelationalOperatorAccess().getEqualToEnumLiteralDeclaration_5());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
