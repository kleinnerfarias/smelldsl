/*
 * generated by Xtext 2.26.0-SNAPSHOT
 */
grammar InternalSmellDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.smelldsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.smelldsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.smelldsl.services.SmellDslGrammarAccess;

}
@parser::members {
	private SmellDslGrammarAccess grammarAccess;

	public void setGrammarAccess(SmellDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleDomainmodel
entryRuleDomainmodel
:
{ before(grammarAccess.getDomainmodelRule()); }
	 ruleDomainmodel
{ after(grammarAccess.getDomainmodelRule()); } 
	 EOF 
;

// Rule Domainmodel
ruleDomainmodel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDomainmodelAccess().getElementsAssignment()); }
		(rule__Domainmodel__ElementsAssignment)*
		{ after(grammarAccess.getDomainmodelAccess().getElementsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleType
entryRuleType
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeAccess().getAlternatives()); }
		(rule__Type__Alternatives)
		{ after(grammarAccess.getTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSmellType
entryRuleSmellType
:
{ before(grammarAccess.getSmellTypeRule()); }
	 ruleSmellType
{ after(grammarAccess.getSmellTypeRule()); } 
	 EOF 
;

// Rule SmellType
ruleSmellType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSmellTypeAccess().getGroup()); }
		(rule__SmellType__Group__0)
		{ after(grammarAccess.getSmellTypeAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSmell
entryRuleSmell
:
{ before(grammarAccess.getSmellRule()); }
	 ruleSmell
{ after(grammarAccess.getSmellRule()); } 
	 EOF 
;

// Rule Smell
ruleSmell 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSmellAccess().getGroup()); }
		(rule__Smell__Group__0)
		{ after(grammarAccess.getSmellAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFeature
entryRuleFeature
:
{ before(grammarAccess.getFeatureRule()); }
	 ruleFeature
{ after(grammarAccess.getFeatureRule()); } 
	 EOF 
;

// Rule Feature
ruleFeature 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFeatureAccess().getGroup()); }
		(rule__Feature__Group__0)
		{ after(grammarAccess.getFeatureAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOptscale
entryRuleOptscale
:
{ before(grammarAccess.getOptscaleRule()); }
	 ruleOptscale
{ after(grammarAccess.getOptscaleRule()); } 
	 EOF 
;

// Rule Optscale
ruleOptscale 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOptscaleAccess().getGroup()); }
		(rule__Optscale__Group__0)
		{ after(grammarAccess.getOptscaleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMeasure
entryRuleMeasure
:
{ before(grammarAccess.getMeasureRule()); }
	 ruleMeasure
{ after(grammarAccess.getMeasureRule()); } 
	 EOF 
;

// Rule Measure
ruleMeasure 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMeasureAccess().getAlternatives()); }
		(rule__Measure__Alternatives)
		{ after(grammarAccess.getMeasureAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSymptom
entryRuleSymptom
:
{ before(grammarAccess.getSymptomRule()); }
	 ruleSymptom
{ after(grammarAccess.getSymptomRule()); } 
	 EOF 
;

// Rule Symptom
ruleSymptom 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSymptomAccess().getGroup()); }
		(rule__Symptom__Group__0)
		{ after(grammarAccess.getSymptomAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTreatment
entryRuleTreatment
:
{ before(grammarAccess.getTreatmentRule()); }
	 ruleTreatment
{ after(grammarAccess.getTreatmentRule()); } 
	 EOF 
;

// Rule Treatment
ruleTreatment 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTreatmentAccess().getGroup()); }
		(rule__Treatment__Group__0)
		{ after(grammarAccess.getTreatmentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRule
entryRuleRule
:
{ before(grammarAccess.getRuleRule()); }
	 ruleRule
{ after(grammarAccess.getRuleRule()); } 
	 EOF 
;

// Rule Rule
ruleRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRuleAccess().getGroup()); }
		(rule__Rule__Group__0)
		{ after(grammarAccess.getRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLogicExpression
entryRuleLogicExpression
:
{ before(grammarAccess.getLogicExpressionRule()); }
	 ruleLogicExpression
{ after(grammarAccess.getLogicExpressionRule()); } 
	 EOF 
;

// Rule LogicExpression
ruleLogicExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLogicExpressionAccess().getAlternatives()); }
		(rule__LogicExpression__Alternatives)
		{ after(grammarAccess.getLogicExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getGroup()); }
		(rule__Expression__Group__0)
		{ after(grammarAccess.getExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleResult
entryRuleResult
:
{ before(grammarAccess.getResultRule()); }
	 ruleResult
{ after(grammarAccess.getResultRule()); } 
	 EOF 
;

// Rule Result
ruleResult 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getResultAccess().getNameAssignment()); }
		(rule__Result__NameAssignment)
		{ after(grammarAccess.getResultAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Scaletype
ruleScaletype
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getScaletypeAccess().getAlternatives()); }
		(rule__Scaletype__Alternatives)
		{ after(grammarAccess.getScaletypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule LogicOperator
ruleLogicOperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicOperatorAccess().getAlternatives()); }
		(rule__LogicOperator__Alternatives)
		{ after(grammarAccess.getLogicOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule RelationalOperator
ruleRelationalOperator
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationalOperatorAccess().getAlternatives()); }
		(rule__RelationalOperator__Alternatives)
		{ after(grammarAccess.getRelationalOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getSmellTypeParserRuleCall_0()); }
		ruleSmellType
		{ after(grammarAccess.getTypeAccess().getSmellTypeParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getSmellParserRuleCall_1()); }
		ruleSmell
		{ after(grammarAccess.getTypeAccess().getSmellParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getRuleParserRuleCall_2()); }
		ruleRule
		{ after(grammarAccess.getTypeAccess().getRuleParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Measure__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMeasureAccess().getNameAssignment_0()); }
		(rule__Measure__NameAssignment_0)
		{ after(grammarAccess.getMeasureAccess().getNameAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getMeasureAccess().getGroup_1()); }
		(rule__Measure__Group_1__0)
		{ after(grammarAccess.getMeasureAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicExpressionAccess().getExpressionAssignment_0()); }
		(rule__LogicExpression__ExpressionAssignment_0)
		{ after(grammarAccess.getLogicExpressionAccess().getExpressionAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getLogicExpressionAccess().getGroup_1()); }
		(rule__LogicExpression__Group_1__0)
		{ after(grammarAccess.getLogicExpressionAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Scaletype__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getScaletypeAccess().getNominalEnumLiteralDeclaration_0()); }
		('Nominal')
		{ after(grammarAccess.getScaletypeAccess().getNominalEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getScaletypeAccess().getOrdinalEnumLiteralDeclaration_1()); }
		('Ordinal')
		{ after(grammarAccess.getScaletypeAccess().getOrdinalEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getScaletypeAccess().getIntervalEnumLiteralDeclaration_2()); }
		('Interval')
		{ after(grammarAccess.getScaletypeAccess().getIntervalEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getScaletypeAccess().getRatioEnumLiteralDeclaration_3()); }
		('Ratio')
		{ after(grammarAccess.getScaletypeAccess().getRatioEnumLiteralDeclaration_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicOperatorAccess().getANDEnumLiteralDeclaration_0()); }
		('AND')
		{ after(grammarAccess.getLogicOperatorAccess().getANDEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getLogicOperatorAccess().getOREnumLiteralDeclaration_1()); }
		('OR')
		{ after(grammarAccess.getLogicOperatorAccess().getOREnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelationalOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelationalOperatorAccess().getGreaterThanOrEqualToEnumLiteralDeclaration_0()); }
		('>=')
		{ after(grammarAccess.getRelationalOperatorAccess().getGreaterThanOrEqualToEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOperatorAccess().getLessThanOrEqualToEnumLiteralDeclaration_1()); }
		('<=')
		{ after(grammarAccess.getRelationalOperatorAccess().getLessThanOrEqualToEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOperatorAccess().getNotEqualToEnumLiteralDeclaration_2()); }
		('!=')
		{ after(grammarAccess.getRelationalOperatorAccess().getNotEqualToEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOperatorAccess().getLessThanEnumLiteralDeclaration_3()); }
		('<')
		{ after(grammarAccess.getRelationalOperatorAccess().getLessThanEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOperatorAccess().getGreaterThanEnumLiteralDeclaration_4()); }
		('>')
		{ after(grammarAccess.getRelationalOperatorAccess().getGreaterThanEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getRelationalOperatorAccess().getEqualToEnumLiteralDeclaration_5()); }
		('==')
		{ after(grammarAccess.getRelationalOperatorAccess().getEqualToEnumLiteralDeclaration_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SmellType__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SmellType__Group__0__Impl
	rule__SmellType__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SmellType__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSmellTypeAccess().getSmelltypeKeyword_0()); }
	'smelltype'
	{ after(grammarAccess.getSmellTypeAccess().getSmelltypeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SmellType__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SmellType__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SmellType__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSmellTypeAccess().getNameAssignment_1()); }
	(rule__SmellType__NameAssignment_1)
	{ after(grammarAccess.getSmellTypeAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Smell__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Smell__Group__0__Impl
	rule__Smell__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Smell__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSmellAccess().getSmellKeyword_0()); }
	'smell'
	{ after(grammarAccess.getSmellAccess().getSmellKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Smell__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Smell__Group__1__Impl
	rule__Smell__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Smell__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSmellAccess().getNameAssignment_1()); }
	(rule__Smell__NameAssignment_1)
	{ after(grammarAccess.getSmellAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Smell__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Smell__Group__2__Impl
	rule__Smell__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Smell__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSmellAccess().getGroup_2()); }
	(rule__Smell__Group_2__0)?
	{ after(grammarAccess.getSmellAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Smell__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Smell__Group__3__Impl
	rule__Smell__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Smell__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSmellAccess().getLeftCurlyBracketKeyword_3()); }
	'{'
	{ after(grammarAccess.getSmellAccess().getLeftCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Smell__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Smell__Group__4__Impl
	rule__Smell__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Smell__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSmellAccess().getSmellcontentAssignment_4()); }
	(rule__Smell__SmellcontentAssignment_4)*
	{ after(grammarAccess.getSmellAccess().getSmellcontentAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Smell__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Smell__Group__5__Impl
	rule__Smell__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Smell__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSmellAccess().getSymptomAssignment_5()); }
	(rule__Smell__SymptomAssignment_5)?
	{ after(grammarAccess.getSmellAccess().getSymptomAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Smell__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Smell__Group__6__Impl
	rule__Smell__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Smell__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSmellAccess().getTreatmentAssignment_6()); }
	(rule__Smell__TreatmentAssignment_6)?
	{ after(grammarAccess.getSmellAccess().getTreatmentAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Smell__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Smell__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Smell__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSmellAccess().getRightCurlyBracketKeyword_7()); }
	'}'
	{ after(grammarAccess.getSmellAccess().getRightCurlyBracketKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Smell__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Smell__Group_2__0__Impl
	rule__Smell__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Smell__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSmellAccess().getExtendsKeyword_2_0()); }
	'extends'
	{ after(grammarAccess.getSmellAccess().getExtendsKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Smell__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Smell__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Smell__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSmellAccess().getSuperTypeAssignment_2_1()); }
	(rule__Smell__SuperTypeAssignment_2_1)
	{ after(grammarAccess.getSmellAccess().getSuperTypeAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Feature__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Feature__Group__0__Impl
	rule__Feature__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureAccess().getFeatureKeyword_0()); }
	'feature'
	{ after(grammarAccess.getFeatureAccess().getFeatureKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Feature__Group__1__Impl
	rule__Feature__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureAccess().getNameAssignment_1()); }
	(rule__Feature__NameAssignment_1)
	{ after(grammarAccess.getFeatureAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Feature__Group__2__Impl
	rule__Feature__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureAccess().getOptscalesAssignment_2()); }
	(rule__Feature__OptscalesAssignment_2)?
	{ after(grammarAccess.getFeatureAccess().getOptscalesAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Feature__Group__3__Impl
	rule__Feature__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureAccess().getWithThresholdKeyword_3()); }
	'with threshold'
	{ after(grammarAccess.getFeatureAccess().getWithThresholdKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Feature__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFeatureAccess().getMeasuresAssignment_4()); }
	(rule__Feature__MeasuresAssignment_4)*
	{ after(grammarAccess.getFeatureAccess().getMeasuresAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Optscale__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Optscale__Group__0__Impl
	rule__Optscale__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Optscale__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptscaleAccess().getIsKeyword_0()); }
	'is'
	{ after(grammarAccess.getOptscaleAccess().getIsKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Optscale__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Optscale__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Optscale__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptscaleAccess().getScaletypeAssignment_1()); }
	(rule__Optscale__ScaletypeAssignment_1)
	{ after(grammarAccess.getOptscaleAccess().getScaletypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Measure__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Measure__Group_1__0__Impl
	rule__Measure__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Measure__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMeasureAccess().getNameAssignment_1_0()); }
	(rule__Measure__NameAssignment_1_0)
	{ after(grammarAccess.getMeasureAccess().getNameAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Measure__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Measure__Group_1__1__Impl
	rule__Measure__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Measure__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMeasureAccess().getCommaKeyword_1_1()); }
	','
	{ after(grammarAccess.getMeasureAccess().getCommaKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Measure__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Measure__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Measure__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMeasureAccess().getMeasureAssignment_1_2()); }
	(rule__Measure__MeasureAssignment_1_2)
	{ after(grammarAccess.getMeasureAccess().getMeasureAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Symptom__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Symptom__Group__0__Impl
	rule__Symptom__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Symptom__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSymptomAccess().getSymptomKeyword_0()); }
	'symptom'
	{ after(grammarAccess.getSymptomAccess().getSymptomKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Symptom__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Symptom__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Symptom__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSymptomAccess().getNameAssignment_1()); }
	(rule__Symptom__NameAssignment_1)
	{ after(grammarAccess.getSymptomAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Treatment__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Treatment__Group__0__Impl
	rule__Treatment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Treatment__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTreatmentAccess().getTreatmentKeyword_0()); }
	'treatment'
	{ after(grammarAccess.getTreatmentAccess().getTreatmentKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Treatment__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Treatment__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Treatment__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTreatmentAccess().getNameAssignment_1()); }
	(rule__Treatment__NameAssignment_1)
	{ after(grammarAccess.getTreatmentAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__0__Impl
	rule__Rule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getRuleKeyword_0()); }
	'rule'
	{ after(grammarAccess.getRuleAccess().getRuleKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__1__Impl
	rule__Rule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getNameAssignment_1()); }
	(rule__Rule__NameAssignment_1)
	{ after(grammarAccess.getRuleAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__2__Impl
	rule__Rule__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getWhenKeyword_2()); }
	'when'
	{ after(grammarAccess.getRuleAccess().getWhenKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__3__Impl
	rule__Rule__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getLogicExpressionAssignment_3()); }
	(rule__Rule__LogicExpressionAssignment_3)*
	{ after(grammarAccess.getRuleAccess().getLogicExpressionAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__4__Impl
	rule__Rule__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getThenKeyword_4()); }
	'then'
	{ after(grammarAccess.getRuleAccess().getThenKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getResultAssignment_5()); }
	(rule__Rule__ResultAssignment_5)*
	{ after(grammarAccess.getRuleAccess().getResultAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LogicExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicExpression__Group_1__0__Impl
	rule__LogicExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicExpressionAccess().getExpressionAssignment_1_0()); }
	(rule__LogicExpression__ExpressionAssignment_1_0)
	{ after(grammarAccess.getLogicExpressionAccess().getExpressionAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicExpression__Group_1__1__Impl
	rule__LogicExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicExpressionAccess().getLogicOperatorAssignment_1_1()); }
	(rule__LogicExpression__LogicOperatorAssignment_1_1)
	{ after(grammarAccess.getLogicExpressionAccess().getLogicOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LogicExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLogicExpressionAccess().getLogicExpressionAssignment_1_2()); }
	(rule__LogicExpression__LogicExpressionAssignment_1_2)
	{ after(grammarAccess.getLogicExpressionAccess().getLogicExpressionAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group__0__Impl
	rule__Expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
	{ after(grammarAccess.getExpressionAccess().getIDTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group__1__Impl
	rule__Expression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getGroup_1()); }
	(rule__Expression__Group_1__0)
	{ after(grammarAccess.getExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group__2__Impl
	rule__Expression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getRelationalOperatorAssignment_2()); }
	(rule__Expression__RelationalOperatorAssignment_2)
	{ after(grammarAccess.getExpressionAccess().getRelationalOperatorAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group__3__Impl
	rule__Expression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getIDTerminalRuleCall_3()); }
	RULE_ID
	{ after(grammarAccess.getExpressionAccess().getIDTerminalRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getGroup_4()); }
	(rule__Expression__Group_4__0)
	{ after(grammarAccess.getExpressionAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_1__0__Impl
	rule__Expression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getExpressionAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
	{ after(grammarAccess.getExpressionAccess().getIDTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_4__0__Impl
	rule__Expression__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getFullStopKeyword_4_0()); }
	'.'
	{ after(grammarAccess.getExpressionAccess().getFullStopKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getIDTerminalRuleCall_4_1()); }
	RULE_ID
	{ after(grammarAccess.getExpressionAccess().getIDTerminalRuleCall_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Domainmodel__ElementsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDomainmodelAccess().getElementsTypeParserRuleCall_0()); }
		ruleType
		{ after(grammarAccess.getDomainmodelAccess().getElementsTypeParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SmellType__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSmellTypeAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getSmellTypeAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Smell__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSmellAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getSmellAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Smell__SuperTypeAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSmellAccess().getSuperTypeSmellTypeCrossReference_2_1_0()); }
		(
			{ before(grammarAccess.getSmellAccess().getSuperTypeSmellTypeIDTerminalRuleCall_2_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getSmellAccess().getSuperTypeSmellTypeIDTerminalRuleCall_2_1_0_1()); }
		)
		{ after(grammarAccess.getSmellAccess().getSuperTypeSmellTypeCrossReference_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Smell__SmellcontentAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSmellAccess().getSmellcontentFeatureParserRuleCall_4_0()); }
		ruleFeature
		{ after(grammarAccess.getSmellAccess().getSmellcontentFeatureParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Smell__SymptomAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSmellAccess().getSymptomSymptomParserRuleCall_5_0()); }
		ruleSymptom
		{ after(grammarAccess.getSmellAccess().getSymptomSymptomParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Smell__TreatmentAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSmellAccess().getTreatmentTreatmentParserRuleCall_6_0()); }
		ruleTreatment
		{ after(grammarAccess.getSmellAccess().getTreatmentTreatmentParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getFeatureAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__OptscalesAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureAccess().getOptscalesOptscaleParserRuleCall_2_0()); }
		ruleOptscale
		{ after(grammarAccess.getFeatureAccess().getOptscalesOptscaleParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Feature__MeasuresAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFeatureAccess().getMeasuresMeasureParserRuleCall_4_0()); }
		ruleMeasure
		{ after(grammarAccess.getFeatureAccess().getMeasuresMeasureParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Optscale__ScaletypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOptscaleAccess().getScaletypeScaletypeEnumRuleCall_1_0()); }
		ruleScaletype
		{ after(grammarAccess.getOptscaleAccess().getScaletypeScaletypeEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Measure__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMeasureAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getMeasureAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Measure__NameAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMeasureAccess().getNameIDTerminalRuleCall_1_0_0()); }
		RULE_ID
		{ after(grammarAccess.getMeasureAccess().getNameIDTerminalRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Measure__MeasureAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMeasureAccess().getMeasureMeasureParserRuleCall_1_2_0()); }
		ruleMeasure
		{ after(grammarAccess.getMeasureAccess().getMeasureMeasureParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Symptom__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSymptomAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getSymptomAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Treatment__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTreatmentAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getTreatmentAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getRuleAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__LogicExpressionAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getLogicExpressionLogicExpressionParserRuleCall_3_0()); }
		ruleLogicExpression
		{ after(grammarAccess.getRuleAccess().getLogicExpressionLogicExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__ResultAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getResultResultParserRuleCall_5_0()); }
		ruleResult
		{ after(grammarAccess.getRuleAccess().getResultResultParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicExpression__ExpressionAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicExpressionAccess().getExpressionExpressionParserRuleCall_0_0()); }
		ruleExpression
		{ after(grammarAccess.getLogicExpressionAccess().getExpressionExpressionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicExpression__ExpressionAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicExpressionAccess().getExpressionExpressionParserRuleCall_1_0_0()); }
		ruleExpression
		{ after(grammarAccess.getLogicExpressionAccess().getExpressionExpressionParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicExpression__LogicOperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicExpressionAccess().getLogicOperatorLogicOperatorEnumRuleCall_1_1_0()); }
		ruleLogicOperator
		{ after(grammarAccess.getLogicExpressionAccess().getLogicOperatorLogicOperatorEnumRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LogicExpression__LogicExpressionAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLogicExpressionAccess().getLogicExpressionLogicExpressionParserRuleCall_1_2_0()); }
		ruleLogicExpression
		{ after(grammarAccess.getLogicExpressionAccess().getLogicExpressionLogicExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__RelationalOperatorAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getRelationalOperatorRelationalOperatorEnumRuleCall_2_0()); }
		ruleRelationalOperator
		{ after(grammarAccess.getExpressionAccess().getRelationalOperatorRelationalOperatorEnumRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Result__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getResultAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getResultAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
