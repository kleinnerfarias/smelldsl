/*
 * generated by Xtext 2.26.0-SNAPSHOT
 */
package org.smelldsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.smelldsl.ide.contentassist.antlr.internal.InternalSmellDslParser;
import org.smelldsl.services.SmellDslGrammarAccess;

public class SmellDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(SmellDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, SmellDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getMeasureAccess().getAlternatives(), "rule__Measure__Alternatives");
			builder.put(grammarAccess.getLogicExpressionAccess().getAlternatives(), "rule__LogicExpression__Alternatives");
			builder.put(grammarAccess.getScaletypeAccess().getAlternatives(), "rule__Scaletype__Alternatives");
			builder.put(grammarAccess.getLogicOperatorAccess().getAlternatives(), "rule__LogicOperator__Alternatives");
			builder.put(grammarAccess.getRelationalOperatorAccess().getAlternatives(), "rule__RelationalOperator__Alternatives");
			builder.put(grammarAccess.getSmellTypeAccess().getGroup(), "rule__SmellType__Group__0");
			builder.put(grammarAccess.getSmellAccess().getGroup(), "rule__Smell__Group__0");
			builder.put(grammarAccess.getSmellAccess().getGroup_2(), "rule__Smell__Group_2__0");
			builder.put(grammarAccess.getFeatureAccess().getGroup(), "rule__Feature__Group__0");
			builder.put(grammarAccess.getOptscaleAccess().getGroup(), "rule__Optscale__Group__0");
			builder.put(grammarAccess.getMeasureAccess().getGroup_1(), "rule__Measure__Group_1__0");
			builder.put(grammarAccess.getSymptomAccess().getGroup(), "rule__Symptom__Group__0");
			builder.put(grammarAccess.getTreatmentAccess().getGroup(), "rule__Treatment__Group__0");
			builder.put(grammarAccess.getRuleAccess().getGroup(), "rule__Rule__Group__0");
			builder.put(grammarAccess.getLogicExpressionAccess().getGroup_1(), "rule__LogicExpression__Group_1__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup_1(), "rule__Expression__Group_1__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup_4(), "rule__Expression__Group_4__0");
			builder.put(grammarAccess.getDomainmodelAccess().getElementsAssignment(), "rule__Domainmodel__ElementsAssignment");
			builder.put(grammarAccess.getSmellTypeAccess().getNameAssignment_1(), "rule__SmellType__NameAssignment_1");
			builder.put(grammarAccess.getSmellAccess().getNameAssignment_1(), "rule__Smell__NameAssignment_1");
			builder.put(grammarAccess.getSmellAccess().getSuperTypeAssignment_2_1(), "rule__Smell__SuperTypeAssignment_2_1");
			builder.put(grammarAccess.getSmellAccess().getSmellcontentAssignment_4(), "rule__Smell__SmellcontentAssignment_4");
			builder.put(grammarAccess.getSmellAccess().getSymptomAssignment_5(), "rule__Smell__SymptomAssignment_5");
			builder.put(grammarAccess.getSmellAccess().getTreatmentAssignment_6(), "rule__Smell__TreatmentAssignment_6");
			builder.put(grammarAccess.getFeatureAccess().getNameAssignment_1(), "rule__Feature__NameAssignment_1");
			builder.put(grammarAccess.getFeatureAccess().getOptscalesAssignment_2(), "rule__Feature__OptscalesAssignment_2");
			builder.put(grammarAccess.getFeatureAccess().getMeasuresAssignment_4(), "rule__Feature__MeasuresAssignment_4");
			builder.put(grammarAccess.getOptscaleAccess().getScaletypeAssignment_1(), "rule__Optscale__ScaletypeAssignment_1");
			builder.put(grammarAccess.getMeasureAccess().getNameAssignment_0(), "rule__Measure__NameAssignment_0");
			builder.put(grammarAccess.getMeasureAccess().getNameAssignment_1_0(), "rule__Measure__NameAssignment_1_0");
			builder.put(grammarAccess.getMeasureAccess().getMeasureAssignment_1_2(), "rule__Measure__MeasureAssignment_1_2");
			builder.put(grammarAccess.getSymptomAccess().getNameAssignment_1(), "rule__Symptom__NameAssignment_1");
			builder.put(grammarAccess.getTreatmentAccess().getNameAssignment_1(), "rule__Treatment__NameAssignment_1");
			builder.put(grammarAccess.getRuleAccess().getNameAssignment_1(), "rule__Rule__NameAssignment_1");
			builder.put(grammarAccess.getRuleAccess().getLogicExpressionAssignment_3(), "rule__Rule__LogicExpressionAssignment_3");
			builder.put(grammarAccess.getRuleAccess().getResultAssignment_5(), "rule__Rule__ResultAssignment_5");
			builder.put(grammarAccess.getLogicExpressionAccess().getExpressionAssignment_0(), "rule__LogicExpression__ExpressionAssignment_0");
			builder.put(grammarAccess.getLogicExpressionAccess().getExpressionAssignment_1_0(), "rule__LogicExpression__ExpressionAssignment_1_0");
			builder.put(grammarAccess.getLogicExpressionAccess().getLogicOperatorAssignment_1_1(), "rule__LogicExpression__LogicOperatorAssignment_1_1");
			builder.put(grammarAccess.getLogicExpressionAccess().getLogicExpressionAssignment_1_2(), "rule__LogicExpression__LogicExpressionAssignment_1_2");
			builder.put(grammarAccess.getExpressionAccess().getRelationalOperatorAssignment_2(), "rule__Expression__RelationalOperatorAssignment_2");
			builder.put(grammarAccess.getResultAccess().getNameAssignment(), "rule__Result__NameAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private SmellDslGrammarAccess grammarAccess;

	@Override
	protected InternalSmellDslParser createParser() {
		InternalSmellDslParser result = new InternalSmellDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SmellDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SmellDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
